From b0dd4361e82131e2e892db96eb40220862c9ce8f Mon Sep 17 00:00:00 2001
From: carl <carl@cloudera.com>
Date: Mon, 4 Jul 2011 23:35:59 -0700
Subject: [PATCH 38/51] HIVE-1815. The class HiveResultSet should implement batch fetching

Reason: Improvement
Author: Bennie Schut
Ref: CDH-3310
---
 .../hadoop/hive/jdbc/HiveQueryResultSet.java       |   35 +++++++++++++++++---
 .../org/apache/hadoop/hive/jdbc/HiveStatement.java |    7 +++-
 .../apache/hadoop/hive/jdbc/TestJdbcDriver.java    |   20 ++++++++---
 3 files changed, 49 insertions(+), 13 deletions(-)

diff --git a/jdbc/src/java/org/apache/hadoop/hive/jdbc/HiveQueryResultSet.java b/jdbc/src/java/org/apache/hadoop/hive/jdbc/HiveQueryResultSet.java
index 9419ecf..239cb8d 100644
--- a/jdbc/src/java/org/apache/hadoop/hive/jdbc/HiveQueryResultSet.java
+++ b/jdbc/src/java/org/apache/hadoop/hive/jdbc/HiveQueryResultSet.java
@@ -21,6 +21,7 @@ package org.apache.hadoop.hive.jdbc;
 import java.sql.SQLException;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Iterator;
 import java.util.List;
 import java.util.Properties;
 
@@ -54,6 +55,10 @@ public class HiveQueryResultSet extends HiveBaseResultSet {
 
   private int maxRows = 0;
   private int rowsFetched = 0;
+  private int fetchSize = 50;
+
+  private List<String> fetchedRows;
+  private Iterator<String> fetchedRowsItr;
 
   public HiveQueryResultSet(HiveInterface client, int maxRows) throws SQLException {
     this.client = client;
@@ -96,18 +101,18 @@ public class HiveQueryResultSet extends HiveBaseResultSet {
       serde = new LazySimpleSerDe();
       Properties props = new Properties();
       if (names.length() > 0) {
-        LOG.info("Column names: " + names);
+        LOG.debug("Column names: " + names);
         props.setProperty(Constants.LIST_COLUMNS, names);
       }
       if (types.length() > 0) {
-        LOG.info("Column types: " + types);
+        LOG.debug("Column types: " + types);
         props.setProperty(Constants.LIST_COLUMN_TYPES, types);
       }
       serde.initialize(new Configuration(), props);
 
     } catch (Exception ex) {
       ex.printStackTrace();
-      throw new SQLException("Could not create ResultSet: " + ex.getMessage());
+      throw new SQLException("Could not create ResultSet: " + ex.getMessage(), ex);
     }
   }
 
@@ -128,9 +133,19 @@ public class HiveQueryResultSet extends HiveBaseResultSet {
       return false;
     }
 
-    String rowStr = "";
     try {
-      rowStr = (String) client.fetchOne();
+      if (fetchedRows == null || !fetchedRowsItr.hasNext()) {
+        fetchedRows = client.fetchN(fetchSize);
+        fetchedRowsItr = fetchedRows.iterator();
+      }
+
+      String rowStr = "";
+      if (fetchedRowsItr.hasNext()) {
+        rowStr = fetchedRowsItr.next();
+      } else {
+        return false;
+      }
+
       rowsFetched++;
       if (LOG.isDebugEnabled()) {
         LOG.debug("Fetched row string: " + rowStr);
@@ -165,6 +180,16 @@ public class HiveQueryResultSet extends HiveBaseResultSet {
     return true;
   }
 
+  @Override
+  public void setFetchSize(int rows) throws SQLException {
+    fetchSize = rows;
+  }
+
+  @Override
+  public int getFetchSize() throws SQLException {
+    return fetchSize;
+  }
+
   /**
    * Convert a LazyObject to a standard Java object in compliance with JDBC 3.0 (see JDBC 3.0
    * Specification, Table B-3: Mapping from JDBC Types to Java Object Types).
diff --git a/jdbc/src/java/org/apache/hadoop/hive/jdbc/HiveStatement.java b/jdbc/src/java/org/apache/hadoop/hive/jdbc/HiveStatement.java
index f3970dd..1b1608d 100644
--- a/jdbc/src/java/org/apache/hadoop/hive/jdbc/HiveStatement.java
+++ b/jdbc/src/java/org/apache/hadoop/hive/jdbc/HiveStatement.java
@@ -32,6 +32,8 @@ import org.apache.hadoop.hive.service.HiveServerException;
  */
 public class HiveStatement implements java.sql.Statement {
   private HiveInterface client;
+  private int fetchSize = 50;
+
   /**
    * We need to keep a reference to the result set to support the following:
    * <code>
@@ -194,6 +196,7 @@ public class HiveStatement implements java.sql.Statement {
       throw new SQLException(ex.toString(), "08S01");
     }
     resultSet = new HiveQueryResultSet(client, maxRows);
+    resultSet.setFetchSize(fetchSize);
     return resultSet;
   }
 
@@ -269,7 +272,7 @@ public class HiveStatement implements java.sql.Statement {
    */
 
   public int getFetchSize() throws SQLException {
-    throw new SQLException("Method not supported");
+    return fetchSize;
   }
 
   /*
@@ -449,7 +452,7 @@ public class HiveStatement implements java.sql.Statement {
    */
 
   public void setFetchSize(int rows) throws SQLException {
-    throw new SQLException("Method not supported");
+    fetchSize = rows;
   }
 
   /*
diff --git a/jdbc/src/test/org/apache/hadoop/hive/jdbc/TestJdbcDriver.java b/jdbc/src/test/org/apache/hadoop/hive/jdbc/TestJdbcDriver.java
index b717117..c99c394 100644
--- a/jdbc/src/test/org/apache/hadoop/hive/jdbc/TestJdbcDriver.java
+++ b/jdbc/src/test/org/apache/hadoop/hive/jdbc/TestJdbcDriver.java
@@ -302,19 +302,23 @@ public class TestJdbcDriver extends TestCase {
   }
 
   public final void testSelectAll() throws Exception {
-    doTestSelectAll(tableName, -1); // tests not setting maxRows (return all)
-    doTestSelectAll(tableName, 0); // tests setting maxRows to 0 (return all)
+    doTestSelectAll(tableName, -1, -1); // tests not setting maxRows (return all)
+    doTestSelectAll(tableName, 0, -1); // tests setting maxRows to 0 (return all)
   }
 
   public final void testSelectAllPartioned() throws Exception {
-    doTestSelectAll(partitionedTableName, -1); // tests not setting maxRows
+    doTestSelectAll(partitionedTableName, -1, -1); // tests not setting maxRows
     // (return all)
-    doTestSelectAll(partitionedTableName, 0); // tests setting maxRows to 0
+    doTestSelectAll(partitionedTableName, 0, -1); // tests setting maxRows to 0
     // (return all)
   }
 
   public final void testSelectAllMaxRows() throws Exception {
-    doTestSelectAll(tableName, 100);
+    doTestSelectAll(tableName, 100, -1);
+  }
+
+  public final void testSelectAllFetchSize() throws Exception {
+    doTestSelectAll(tableName, 100, 20);
   }
 
   public void testDataTypes() throws Exception {
@@ -376,11 +380,15 @@ public class TestJdbcDriver extends TestCase {
     assertFalse(res.next());
   }
 
-  private void doTestSelectAll(String tableName, int maxRows) throws Exception {
+  private void doTestSelectAll(String tableName, int maxRows, int fetchSize) throws Exception {
     Statement stmt = con.createStatement();
     if (maxRows >= 0) {
       stmt.setMaxRows(maxRows);
     }
+    if (fetchSize > 0) {
+      stmt.setFetchSize(fetchSize);
+      assertEquals(fetchSize, stmt.getFetchSize());
+    }
 
     // JDBC says that 0 means return all, which is the default
     int expectedMaxRows = maxRows < 1 ? 0 : maxRows;
-- 
1.7.0.4

